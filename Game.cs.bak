using SFML.Audio;
using SFML.Graphics;
using SFML.System;
using SFML.Window;
using System;
using System.Collections.Generic;
using System.Threading;

namespace SFML.Learning
{
    public abstract class Game
    {
        public static int MouseX;
        public static int MouseY;

        #region Internal Field

        // Input
        private static List<Keyboard.Key> KeysCodeDown = new List<Keyboard.Key>();
        private static List<Keyboard.Key> KeysCodePressed = new List<Keyboard.Key>();

        private static List<Keyboard.Key> KeysCodeUp = new List<Keyboard.Key>();
        private static List<Keyboard.Key> KeysCodeRelased = new List<Keyboard.Key>();

        private static int MouseButtonDown;
        private static int MouseButtonUp;

        private static RenderWindow window;

        // Delta time
        private static Clock clock;
        public static float DeltaTime;

        // Lable
        private static Color fillColor = Color.White;
        private static Font currentFont;
        private static Text lable = new Text();

        // Shapes
        private static CircleShape circle = new CircleShape();
        private static RectangleShape rectangle = new RectangleShape();

        // Resources
        private static ResourceList<Texture> textures = new ResourceList<Texture>(10);
        private static ResourceList<Sprite> sprites = new ResourceList<Sprite>(10);
        private static ResourceList<SoundBuffer> soundsBuffers = new ResourceList<SoundBuffer>(10);
        private static ResourceList<Sound> sounds = new ResourceList<Sound>(10);
        private static ResourceList<Music> musics = new ResourceList<Music>(10);
        #endregion

        #region Internal

        private static void DrawObject(object obj, float x, float y)
        {
            (obj as Transformable).Position = new Vector2f(x, y);

            window.Draw(obj as Drawable);
        }

        private static void DrawShape(Shape shape, float x, float y)
        {
            shape.Position = new Vector2f(x, y);
            shape.FillColor = fillColor;

            window.Draw(shape);
        }
        #endregion

        #region Init
        public static void InitWindow(uint width, uint height, string title = "untitled")
        {
            window = new RenderWindow(new VideoMode(width, height), title);

            window.Closed += Window_Closed;

            window.KeyPressed += Window_KeyPressed;
            window.KeyReleased += Window_KeyReleased;
            window.MouseButtonPressed += Window_MouseButtonPressed;
            window.MouseButtonReleased += Window_MouseButtonReleased;


            window.SetFramerateLimit(60);

            clock = new Clock();
        }

        private static void Window_MouseButtonReleased(object sender, MouseButtonEventArgs e)
        {
            MouseButtonUp = (int) e.Button;
            MouseButtonDown = -1;
        }

        private static void Window_MouseButtonPressed(object sender, MouseButtonEventArgs e)
        {
            MouseButtonUp = -1;
            MouseButtonDown = (int) e.Button;
        }

        private static void Window_KeyReleased(object sender, KeyEventArgs e)
        {
            // up
            if (KeysCodeUp.Contains(e.Code) == false)
                if (KeysCodeRelased.Contains(e.Code) == false)
                    KeysCodeUp.Add(e.Code);

            if (KeysCodeRelased.Contains(e.Code) == false)
                KeysCodeRelased.Add(e.Code);


            // down
            if (KeysCodePressed.Contains(e.Code) == true)
                KeysCodePressed.Remove(e.Code);
        }

        private static void Window_KeyPressed(object sender, KeyEventArgs e)
        {
            // down
            if(KeysCodeDown.Contains(e.Code) == false)
                if (KeysCodePressed.Contains(e.Code) == false)
                    KeysCodeDown.Add(e.Code);

            if (KeysCodePressed.Contains(e.Code) == false)
                KeysCodePressed.Add(e.Code);

            // up
            if (KeysCodeRelased.Contains(e.Code) == true)
                KeysCodeRelased.Remove(e.Code);
        }

        private static void Window_Closed(object sender, EventArgs e)
        {
            if (window == null) return;

            window.Close();

            Environment.Exit(0);
        }

        #endregion

        #region Window
        public static void DispatchEvents()
        {
            window.DispatchEvents();

            MouseX = Mouse.GetPosition(window).X;
            MouseY = Mouse.GetPosition(window).Y;
        }

        public static void DisplayWindow()
        {
            window.Display();

            if (MouseButtonDown != -1) MouseButtonDown = -1;
            if (MouseButtonUp != -1) MouseButtonUp = -1;

            KeysCodeDown.Clear();
            KeysCodeUp.Clear();

        }

        public static void ClearWindow(byte r = 0, byte g = 0, byte b = 0)
        {
            window.Clear(new Color(r, g, b));

            DeltaTime = clock.Restart().AsSeconds();
        }

        public static void ClearWindow(Color color)
        {
            window.Clear(color);

            DeltaTime = clock.Restart().AsSeconds();
        }

        public static void Delay(int ms)
        {
            Thread.Sleep(ms);
        }

        #endregion

        #region Keyboard

        public static bool GetKey(Keyboard.Key key)
        {
            return Keyboard.IsKeyPressed(key);
        }

        public static bool GetKeyDown(Keyboard.Key key)
        {
            return KeysCodeDown.Contains(key);
        }

        public static bool GetKeyUp(Keyboard.Key key)
        {
            return KeysCodeUp.Contains(key);
        }


        #endregion

        #region Mouse

        public static bool GetMouseButton(Mouse.Button button)
        {
            return Mouse.IsButtonPressed(button);
        }

        public static bool GetMouseButtonDown(Mouse.Button button)
        {
            return MouseButtonDown == (int) button;
        }

        public static bool GetMouseButtonUp(Mouse.Button button)
        {
            return MouseButtonUp == (int)button; 
        }

        #endregion

        #region Color
        public static void SetFillColor(Color color)
        {
            fillColor = color;
        }

        public static void SetFillColor(byte red, byte green, byte blue)
        {
            fillColor = new Color(red, green, blue);
        }


        #endregion

        #region Draw Primitive
        // Optimize
        public static void DrawLine(float x0, float y0, float x1, float y1, int width = 1)
        {
            float ys = Math.Min(y0, y1);
            float ye = Math.Max(y0, y1);

            float xs = Math.Min(x0, x1);
            float xe = Math.Max(x0, x1);

            if (xs == xe)
            {
                for (float y = ys; y <= ye; y++)
                {
                    FillCircle(xs, y, width);
                }
                return;
            }

            if (ys == ye)
            {
                for (float x = xs; x <= xe; x++)
                {
                    FillCircle(x, ys, width);
                }
                return;
            }

            if (Math.Abs((int)(xs - xe)) <= Math.Abs((int)(ys - ye)))
            {
                for (float y = ys; y <= ye; y++)
                {
                    float x = ((x1 - x0) / (y1 - y0)) * (y - y0) + x0;

                    FillCircle(x, y, width);
                }
                return;
            }

            if (Math.Abs(xs - xe) > Math.Abs(ys - ye))
            {
                for (float x = xs; x <= xe; x++)
                {
                    float y = ((y1 - y0) / (x1 - x0)) * (x - x0) + y0;

                    FillCircle(x, y, width);
                }
                return;
            }

        }

        public static void FillCircle(float x, float y, float radius)
        {
            circle.Radius = radius;

            DrawShape(circle, x - radius, y - radius);
        }

        public static void FillRectangle(float x, float y, float width, float height)
        {
            rectangle.Size = new Vector2f(width, height);

            DrawShape(rectangle, x, y);
        }

        #endregion

        #region Textures and Sprites


        public static string LoadTexture(string path)
        {
            Texture t = textures.Add(path, new Texture(path));

            sprites.Add(path, new Sprite(t));

            return path;
        }

        public static void DrawSprite(string name, float x, float y)
        {
            Sprite s = sprites.Get(name);

            s.TextureRect = new IntRect(0, 0, (int)s.Texture.Size.X, (int)s.Texture.Size.Y);

            DrawObject(s, x, y);
        }

        public static void DrawSprite(string name, float x, float y, int left, int top, int width, int height)
        {
            Sprite s = sprites.Get(name);

            s.TextureRect = new IntRect(left, top, width, height);

            DrawObject(s, x, y);
        }

        #endregion

        #region Sound 

        public static string LoadSound(string path)
        {
            SoundBuffer sb = soundsBuffers.Add(path, new SoundBuffer(path));

            sounds.Add(path, new Sound(sb));

            return path;
        }

        public static void PlaySound(string name)
        {
            Sound s = sounds.Get(name);

            if (s.Status == SoundStatus.Playing) return;

            s.Play();
        }

        public static void PlaySound(string name, float volume)
        {
            Sound s = sounds.Get(name);
            s.Volume = volume;

            if (s.Status == SoundStatus.Playing) return;

            s.Play();
        }

        #endregion

        #region Music

        public static string LoadMusic(string path)
        {
            musics.Add(path, new Music(path));
            return path;
        }

        public static void PlayMusic(string name)
        {
            Music m = musics.Get(name);

            if (m.Status == SoundStatus.Playing) return;

            m.Play();
        }


        public static void PlayMusic(string name, float volume)
        {
            Music m = musics.Get(name);
            m.Volume = volume;

            if (m.Status == SoundStatus.Playing) return;

            m.Play();
        }


        public static void StopMusic(string name)
        {
            Music m = musics.Get(name);

            m.Stop();
        }

        #endregion

        #region Text

        public static void SetFont(string path)
        {
            currentFont = new Font(path);
            lable = new Text();
            lable.Font = currentFont;
        }

        public static void DrawText(int x, int y, string text, uint size = 12)
        {
            lable.DisplayedString = text;
            lable.CharacterSize = size;

            lable.Position = new Vector2f(x, y);
            lable.FillColor = fillColor;

            window.Draw(lable);
        }

        #endregion
    }

}

